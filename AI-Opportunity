{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<table style=\"margin: 0; text-align: left; width:100%\">\n",
    "    <tr>\n",
    "        <td style=\"width: 150px; height: 150px; vertical-align: middle;\">\n",
    "            <img src=\"../assets/stop.png\" width=\"150\" height=\"150\" style=\"display: block;\" />\n",
    "        </td>\n",
    "        <td>\n",
    "            <h2 style=\"color:#ff7800;\">Are you ready for action??</h2>\n",
    "            <span style=\"color:#ff7800;\">Have you completed all the setup steps in the <a href=\"../setup/\">setup</a> folder?<br/>\n",
    "            Have you checked out the guides in the <a href=\"../guides/01_intro.ipynb\">guides</a> folder?<br/>\n",
    "            Well in that case, you're ready!!\n",
    "            </span>\n",
    "        </td>\n",
    "    </tr>\n",
    "</table>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<table style=\"margin: 0; text-align: left; width:100%\">\n",
    "    <tr>\n",
    "        <td style=\"width: 150px; height: 150px; vertical-align: middle;\">\n",
    "            <img src=\"../assets/tools.png\" width=\"150\" height=\"150\" style=\"display: block;\" />\n",
    "        </td>\n",
    "        <td>\n",
    "            <h2 style=\"color:#00bfff;\">This code is a live resource - keep an eye out for my updates</h2>\n",
    "            <span style=\"color:#00bfff;\">I push updates regularly. As people ask questions or have problems, I add more examples and improve explanations. As a result, the code below might not be identical to the videos, as I've added more steps and better comments. Consider this like an interactive book that accompanies the lectures.<br/><br/>\n",
    "            I try to send emails regularly with important updates related to the course. You can find this in the 'Announcements' section of Udemy in the left sidebar. You can also choose to receive my emails via your Notification Settings in Udemy. I'm respectful of your inbox and always try to add value with my emails!\n",
    "            </span>\n",
    "        </td>\n",
    "    </tr>\n",
    "</table>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### And please do remember to contact me if I can help\n",
    "\n",
    "And I love to connect: https://www.linkedin.com/in/eddonner/\n",
    "\n",
    "\n",
    "### New to Notebooks like this one? Head over to the guides folder!\n",
    "\n",
    "Just to check you've already added the Python and Jupyter extensions to Cursor, if not already installed:\n",
    "- Open extensions (View >> extensions)\n",
    "- Search for python, and when the results show, click on the ms-python one, and Install it if not already installed\n",
    "- Search for jupyter, and when the results show, click on the Microsoft one, and Install it if not already installed  \n",
    "Then View >> Explorer to bring back the File Explorer.\n",
    "\n",
    "And then:\n",
    "1. Click where it says \"Select Kernel\" near the top right, and select the option called `.venv (Python 3.12.9)` or similar, which should be the first choice or the most prominent choice. You may need to choose \"Python Environments\" first.\n",
    "2. Click in each \"cell\" below, starting with the cell immediately below this text, and press Shift+Enter to run\n",
    "3. Enjoy!\n",
    "\n",
    "After you click \"Select Kernel\", if there is no option like `.venv (Python 3.12.9)` then please do the following:  \n",
    "1. On Mac: From the Cursor menu, choose Settings >> VS Code Settings (NOTE: be sure to select `VSCode Settings` not `Cursor Settings`);  \n",
    "On Windows PC: From the File menu, choose Preferences >> VS Code Settings(NOTE: be sure to select `VSCode Settings` not `Cursor Settings`)  \n",
    "2. In the Settings search bar, type \"venv\"  \n",
    "3. In the field \"Path to folder with a list of Virtual Environments\" put the path to the project root, like C:\\Users\\username\\projects\\agents (on a Windows PC) or /Users/username/projects/agents (on Mac or Linux).  \n",
    "And then try again.\n",
    "\n",
    "Having problems with missing Python versions in that list? Have you ever used Anaconda before? It might be interferring. Quit Cursor, bring up a new command line, and make sure that your Anaconda environment is deactivated:    \n",
    "`conda deactivate`  \n",
    "And if you still have any problems with conda and python versions, it's possible that you will need to run this too:  \n",
    "`conda config --set auto_activate_base false`  \n",
    "and then from within the Agents directory, you should be able to run `uv python list` and see the Python 3.12 version."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# First let's do an import\n",
    "from dotenv import load_dotenv\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Next it's time to load the API keys into environment variables\n",
    "\n",
    "load_dotenv(override=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OpenAI API Key exists and begins sk-proj-\n"
     ]
    }
   ],
   "source": [
    "# Check the keys\n",
    "\n",
    "import os\n",
    "openai_api_key = os.getenv('OPENAI_API_KEY')\n",
    "\n",
    "if openai_api_key:\n",
    "    print(f\"OpenAI API Key exists and begins {openai_api_key[:8]}\")\n",
    "else:\n",
    "    print(\"OpenAI API Key not set - please head to the troubleshooting guide in the setup folder\")\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "# And now - the all important import statement\n",
    "# If you get an import error - head over to troubleshooting guide\n",
    "\n",
    "from openai import OpenAI"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "# And now we'll create an instance of the OpenAI class\n",
    "# If you're not sure what it means to create an instance of a class - head over to the guides folder!\n",
    "# If you get a NameError - head over to the guides folder to learn about NameErrors\n",
    "\n",
    "openai = OpenAI()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a list of messages in the familiar OpenAI format\n",
    "\n",
    "messages = [{\"role\": \"user\", \"content\": \"What is 2+2?\"}]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2 + 2 equals 4.\n"
     ]
    }
   ],
   "source": [
    "# And now call it! Any problems, head to the troubleshooting guide\n",
    "# This uses GPT 4.1 nano, the incredibly cheap model\n",
    "\n",
    "response = openai.chat.completions.create(\n",
    "    model=\"gpt-4.1-nano\",\n",
    "    messages=messages\n",
    ")\n",
    "\n",
    "print(response.choices[0].message.content)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# And now - let's ask for a question:\n",
    "\n",
    "question = \"Please propose a hard, challenging question to assess someone's IQ. Respond only with the question.\"\n",
    "messages = [{\"role\": \"user\", \"content\": question}]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "If it takes 5 machines 5 minutes to make 5 widgets, how long would it take 100 machines to make 100 widgets?\n"
     ]
    }
   ],
   "source": [
    "# ask it - this uses GPT 4.1 mini, still cheap but more powerful than nano\n",
    "\n",
    "response = openai.chat.completions.create(\n",
    "    model=\"gpt-4.1-mini\",\n",
    "    messages=messages\n",
    ")\n",
    "\n",
    "question = response.choices[0].message.content\n",
    "\n",
    "print(question)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# form a new messages list\n",
    "messages = [{\"role\": \"user\", \"content\": question}]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Let's analyze the problem step-by-step:\n",
      "\n",
      "**Given:**\n",
      "- 5 machines take 5 minutes to make 5 widgets.\n",
      "\n",
      "**Step 1: Find the rate of one machine**\n",
      "- 5 machines make 5 widgets in 5 minutes.\n",
      "- So, the rate for 5 machines is \\( \\frac{5 \\text{ widgets}}{5 \\text{ minutes}} = 1 \\text{ widget per minute} \\).\n",
      "- Therefore, the rate for 1 machine is \\( \\frac{1 \\text{ widget per minute}}{5} = \\frac{1}{5} \\text{ widgets per minute} \\).\n",
      "\n",
      "**Step 2: Use this rate to find time for 100 machines to make 100 widgets**\n",
      "- Rate for 100 machines = \\( 100 \\times \\frac{1}{5} = 20 \\text{ widgets per minute} \\).\n",
      "- To make 100 widgets at 20 widgets per minute:\n",
      "  \n",
      "  \\[\n",
      "  \\text{Time} = \\frac{100 \\text{ widgets}}{20 \\text{ widgets per minute}} = 5 \\text{ minutes}.\n",
      "  \\]\n",
      "\n",
      "**Answer:** It would take **5 minutes** for 100 machines to make 100 widgets.\n"
     ]
    }
   ],
   "source": [
    "# Ask it again\n",
    "\n",
    "response = openai.chat.completions.create(\n",
    "    model=\"gpt-4.1-mini\",\n",
    "    messages=messages\n",
    ")\n",
    "\n",
    "answer = response.choices[0].message.content\n",
    "print(answer)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/markdown": [
       "Let's analyze the problem step-by-step:\n",
       "\n",
       "**Given:**\n",
       "- 5 machines take 5 minutes to make 5 widgets.\n",
       "\n",
       "**Step 1: Find the rate of one machine**\n",
       "- 5 machines make 5 widgets in 5 minutes.\n",
       "- So, the rate for 5 machines is \\( \\frac{5 \\text{ widgets}}{5 \\text{ minutes}} = 1 \\text{ widget per minute} \\).\n",
       "- Therefore, the rate for 1 machine is \\( \\frac{1 \\text{ widget per minute}}{5} = \\frac{1}{5} \\text{ widgets per minute} \\).\n",
       "\n",
       "**Step 2: Use this rate to find time for 100 machines to make 100 widgets**\n",
       "- Rate for 100 machines = \\( 100 \\times \\frac{1}{5} = 20 \\text{ widgets per minute} \\).\n",
       "- To make 100 widgets at 20 widgets per minute:\n",
       "  \n",
       "  \\[\n",
       "  \\text{Time} = \\frac{100 \\text{ widgets}}{20 \\text{ widgets per minute}} = 5 \\text{ minutes}.\n",
       "  \\]\n",
       "\n",
       "**Answer:** It would take **5 minutes** for 100 machines to make 100 widgets."
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from IPython.display import Markdown, display\n",
    "\n",
    "display(Markdown(answer))\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Congratulations!\n",
    "\n",
    "That was a small, simple step in the direction of Agentic AI, with your new environment!\n",
    "\n",
    "Next time things get more interesting..."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<table style=\"margin: 0; text-align: left; width:100%\">\n",
    "    <tr>\n",
    "        <td style=\"width: 150px; height: 150px; vertical-align: middle;\">\n",
    "            <img src=\"../assets/exercise.png\" width=\"150\" height=\"150\" style=\"display: block;\" />\n",
    "        </td>\n",
    "        <td>\n",
    "            <h2 style=\"color:#ff7800;\">Exercise</h2>\n",
    "            <span style=\"color:#ff7800;\">Now try this commercial application:<br/>\n",
    "            First ask the LLM to pick a business area that might be worth exploring for an Agentic AI opportunity.<br/>\n",
    "            Then ask the LLM to present a pain-point in that industry - something challenging that might be ripe for an Agentic solution.<br/>\n",
    "            Finally have 3 third LLM call propose the Agentic AI solution.\n",
    "            </span>\n",
    "        </td>\n",
    "    </tr>\n",
    "</table>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Building greater connectivity and relationship within a church community can be deeply enriching and can help foster a sense of belonging and mutual support. Here are several key areas worth exploring for this purpose:\n",
      "\n",
      "1. **Small Groups and Home Fellowships**  \n",
      "   - Creating or strengthening small groups or home fellowships encourages deeper relationships beyond Sunday services. These groups provide environments for sharing life experiences, studying scripture together, praying, and supporting one another.\n",
      "\n",
      "2. **Volunteer and Ministry Teams**  \n",
      "   - Engaging people in volunteer roles and ministry teams (e.g., hospitality, children’s ministry, outreach, music) fosters a sense of purpose and connection. Serving together builds camaraderie and helps people relate on a practical and emotional level.\n",
      "\n",
      "3. **Fellowship Events and Social Activities**  \n",
      "   - Organizing regular social gatherings, such as potlucks, game nights, retreats, or family days, enables informal relationship-building in a relaxed setting, which can break down barriers and encourage new friendships.\n",
      "\n",
      "4. **Mentorship and Discipleship Programs**  \n",
      "   - Establishing mentoring relationships or discipleship partnerships helps connect individuals across different age groups and stages of faith, fostering spiritual growth alongside relational bonds.\n",
      "\n",
      "5. **Prayer Groups and Shared Spiritual Practices**  \n",
      "   - Offering prayer meetings, contemplative practices, or shared spiritual disciplines invites people to connect on a deeper emotional and spiritual level, reinforcing trust and empathy within the community.\n",
      "\n",
      "6. **Welcoming and Assimilation Ministries**  \n",
      "   - Improving how newcomers are welcomed and integrated through greeter teams, newcomer classes, and follow-up encourages new attendees to feel included and connected quickly.\n",
      "\n",
      "7. **Communication Platforms**  \n",
      "   - Utilizing digital platforms such as church apps, social media groups, and messaging systems can enhance communication and keep people connected between gatherings.\n",
      "\n",
      "8. **Intergenerational Activities**  \n",
      "   - Creating programs that bring together all age groups encourages wider relational links and a stronger sense of communal identity.\n",
      "\n",
      "9. **Support Groups and Care Ministries**  \n",
      "   - Establishing ministries focused on life’s challenges (grief support, addiction recovery, parenting groups) connects people through shared struggles and the hope found in community.\n",
      "\n",
      "By focusing on these areas, churches can cultivate an environment where relationships naturally deepen, and connectivity flourishes, ultimately strengthening the overall health and mission of the church community.\n"
     ]
    }
   ],
   "source": [
    "# First create the messages:\n",
    "\n",
    "messages = [{\"role\": \"user\", \"content\": \"What areas in churches be worth exploring for building greater connectivity and relationship building?\"}]\n",
    "\n",
    "# Then make the first call:\n",
    "\n",
    "response = openai.chat.completions.create(\n",
    "    model=\"gpt-4.1-mini\",\n",
    "    messages=messages\n",
    ")\n",
    "\n",
    "# Then read the business idea:\n",
    "\n",
    "Church_idea = response.choices[0].message.content\n",
    "print(Church_idea)\n",
    "\n",
    "# And repeat!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Exploring agentic AI opportunities within church contexts can be quite interesting, especially as many religious organizations look to enhance community engagement, manage operations efficiently, and provide meaningful spiritual support. Here are several areas within churches where agentic AI could be valuable:\n",
      "\n",
      "1. **Community Engagement and Outreach**  \n",
      "   - **Personalized Communication:** AI agents could tailor messages, announcements, or devotional content based on individual member preferences, attendance, and involvement history.  \n",
      "   - **Virtual Outreach:** Chatbots or virtual assistants could interact with visitors on church websites or social media, answering questions about services, events, beliefs, and membership.  \n",
      "\n",
      "2. **Pastoral Care and Counseling Support**  \n",
      "   - **Emotional Support Bots:** While not replacing human counselors, AI agents could provide immediate empathetic responses, guide prayer sessions, or offer scriptural encouragement to individuals seeking support outside of office hours.  \n",
      "   - **Mental Health Screening:** AI could assist pastors or counselors by flagging patterns in communication that suggest mental health concerns, prompting timely intervention.  \n",
      "\n",
      "3. **Administrative and Operational Efficiency**  \n",
      "   - **Automated Scheduling:** Agentic AI could manage the scheduling of services, events, volunteer shifts, and meetings, optimizing for conflicts and resource availability.  \n",
      "   - **Resource Allocation:** AI could help track donations, budget allocations, and inventory (e.g., supplies for events or charity drives), making recommendations for stewardship.  \n",
      "\n",
      "4. **Educational Programs and Spiritual Formation**  \n",
      "   - **Adaptive Learning AI:** Personalized Bible study or religious education programs that adapt to a learner's pace, interests, and theological background.  \n",
      "   - **Interactive Catechism or Confirmation Prep:** AI tutors guiding youth or new members through foundational teachings with quizzes, reflections, and feedback.  \n",
      "\n",
      "5. **Event Management and Experience Enhancement**  \n",
      "   - **AI-guided Tours:** For large or historic churches, AI agents could provide virtual or augmented reality tours with personalized commentary.  \n",
      "   - **Service Enhancement:** AI could assist musicians, liturgists, or tech teams in coordinating music, lighting, or multimedia elements in worship services.  \n",
      "\n",
      "6. **Data Analysis for Growth and Development**  \n",
      "   - **Attendance and Participation Trends:** Agentic AI could analyze data to help leadership understand engagement patterns and tailor programs to meet congregational needs.  \n",
      "   - **Sentiment Analysis:** Monitoring feedback from sermons, events, or social media to gauge community sentiment and areas for improvement.\n",
      "\n",
      "7. **Interfaith and Global Outreach**  \n",
      "   - **Translation and Interpretation Services:** AI agents could facilitate multilingual communication for diverse congregations or during missionary activities.  \n",
      "   - **Cultural Sensitivity Training:** AI tools could assist clergy and staff in understanding and engaging respectfully with different cultural contexts.\n",
      "\n",
      "When considering agentic AI in church settings, it's important to maintain respect for privacy, theological principles, and the human-centered nature of pastoral care. Deployments should complement, not replace, the essential human elements of faith communities.\n",
      "\n",
      "---\n",
      "\n",
      "If you have a specific church context or project in mind, I can tailor these opportunities further!\n"
     ]
    }
   ],
   "source": [
    "# First create the messages:\n",
    "\n",
    "messages = [{\"role\": \"user\", \"content\": \"What areas in churches be worth exploring for and Agentic AI opporunity?\"}]\n",
    "\n",
    "# Then make the first call:\n",
    "\n",
    "response = openai.chat.completions.create(\n",
    "    model=\"gpt-4.1-mini\",\n",
    "    messages=messages\n",
    ")\n",
    "\n",
    "# Then read the business idea:\n",
    "\n",
    "Church_idea = response.choices[0].message.content\n",
    "print(Church_idea)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "📌 Step 1 - Church Area:\n",
      " One area in a church setting that might be worth exploring for an Agentic AI opportunity would be the Church's Administrative Processes. Implementing AI could enhance efficiency in areas such as recordkeeping, budgeting, scheduling, communication with congregation members, donations management, and event planning. This could free up more time for the church staff to focus on services, outreach, and other personal interaction tasks. \n",
      "\n",
      "Additionally, AI could potentially support digital outreach, creating personalized content for members, and new visitor follow-ups. Another opportunity for AI could be in the analysis of church growth and demographic patterns, empowering churches to create strategies that effectively reach their communities based on the data. \n",
      "\n",
      "For instance, AI chatbots could be used on the church's website for answering common queries on real-time basis, thus enhancing the user experience. Machine Learning algorithms could help in analyzing patterns in donations and attendance, assisting in predicting future trends and planning resources accordingly. \n",
      "\n",
      "Remember, introducing AI solutions in a church environment would need to be done with sensitivity, ensuring that the personal touch and the sense of community, which is vital in such settings, is not lost.\n",
      "\n",
      "⚠️ Step 2 - Pain Point:\n",
      " One major pain point in a church setting that could be ripe for an Agentic AI solution is the management of administrative tasks. These tasks often involve time-consuming but essential activities like recordkeeping, budgeting, scheduling, communication with congregation members, donations management, and event planning. This workload can leave less time for personnel to engage in the core-activities of the church such as services and personal interactions. Implementing AI could greatly reduce the burden of these administrative tasks, leading to greater efficiency and allowing church staff to focus on their primary roles in serving the congregation and community.\n",
      "\n",
      "🤖 Step 3 - Agentic AI Solution:\n",
      " Agentic AI offers a wide range of solutions to help streamline administrative tasks in a church setting by automating processes and providing insights with data analysis. \n",
      "\n",
      "1. Church Management System: Implement an AI-powered Church Management System designed to handle administrative tasks automatically. This system will include features such as automated record keeping, budget tracking, and event scheduling. Artificial Intelligence can streamline the data entry and maintenance process, reducing the risk of human error and saving significant time.\n",
      "\n",
      "2. AI Chatbot: Deploy an AI-driven Chatbot on the church website and social media platforms. The AI Chatbot will serve as a 24/7 customer service representative, answering frequently asked questions, assisting visitors navigate through the website, and providing quick responses to enquiries. This ensures that congregation members can receive support and information around the clock. \n",
      "\n",
      "3. Automated Communication: Use AI to streamline communication with congregation members. AI can send automated emails or texts for updates, event reminders, or donation requests. \n",
      "\n",
      "4. AI in Donations Management: Develop an AI system for managing donations that can automatically track, confirm, and acknowledge gifts. It could also predict donation trends based on historical data, assisting in budget planning.\n",
      "\n",
      "5. AI in Event Planning: Utilize AI to predict potential attendance for events based on participation trends. This will help in preparing adequately and managing resources efficiently. \n",
      "\n",
      "6. Personalized Content Creation: Integrate AI tools to create personalized content for members. These tools analyze individuals’ interaction on church platforms and other relevant information, enabling personalized messages or recommendations. \n",
      "\n",
      "7. Church Growth and Demographic Analysis: Use AI’s data analytics capabilities to analyze patterns in church growth and demographics. It can help identify areas of strength and where improvement is needed, enabling the church to design strategies that effectively reach and engage members and the broader community.\n",
      "\n",
      "However, introducing AI solutions should be done with care to maintain the deeply personal and intimate nature of the church setting. All AI implementations must be aimed at assisting and enhancing human capabilities rather than replacing them. Agentic AI's ethos aligns perfectly with this approach, as it acknowledges AI’s role as an agent acting on behalf of individuals -- assisting, not overtaking.\n"
     ]
    }
   ],
   "source": [
    "\n",
    "client = OpenAI(api_key=openai_api_key)\n",
    "\n",
    "def chat(messages):\n",
    "    response = client.chat.completions.create(\n",
    "        model=\"gpt-4\",\n",
    "        messages=messages\n",
    "    )\n",
    "    return response.choices[0].message.content.strip()\n",
    "\n",
    " # Step 1: Ask the LLM to pick a business area for Agentic AI\n",
    "step1_messages = [\n",
    "    {\"role\": \"system\", \"content\": \"You are a helpful assistant with strong business analysis skills.\"},  # System prompt to set context\n",
    "    {\"role\": \"user\", \"content\": \"Pick a area of church that might be worth exploring for an Agentic AI opportunity.\"}  # User question\n",
    "]\n",
    "church_area = chat(step1_messages)  # Call the chat() function to get the business area\n",
    "print(\"\\n📌 Step 1 - Church Area:\\n\", church_area)  # Print the result nicely\n",
    "\n",
    "# Step 2: Ask the LLM to describe a pain-point in the selected business area\n",
    "step2_messages = [\n",
    "    {\"role\": \"system\", \"content\": \"You are a business consultant skilled at identifying challenges in various industries.\"},  # Context prompt\n",
    "    {\"role\": \"user\", \"content\": f\"In the church area of '{church_area}', what is a major pain-point or challenge that might be ripe for an Agentic AI solution?\"}\n",
    "    # Use the output from Step 1 to customize the next question\n",
    "]\n",
    "pain_point = chat(step2_messages)  # Get the pain-point from the LLM\n",
    "print(\"\\n⚠️ Step 2 - Pain Point:\\n\", pain_point)  # Print the pain-point\n",
    "\n",
    "# Step 3: Ask the LLM to propose an Agentic AI solution to the pain-point\n",
    "step3_messages = [\n",
    "    {\"role\": \"system\", \"content\": \"You are an expert in building Agentic AI solutions.\"},  # Set expert role\n",
    "    {\"role\": \"user\", \"content\": f\"Given the pain point: '{pain_point}', propose an Agentic AI-based solution for the '{church_area}' domain.\"}\n",
    "   ]   # Use both previous results to frame the request\n",
    "Agentic_AI_solution = chat(step3_messages)  # Get the Agentic AI solution from the LLM\n",
    "print(\"\\n🤖 Step 3 - Agentic AI Solution:\\n\", Agentic_AI_solution)  # Print the Agentic AI solution"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
